makeCacheMatrix <- function(x = matrix()) {
inversem <- NULL
set <- function(y){
x<<-y
inversem<<-NULL
}
get<-function(){x}
setInverse<-function(im){inversem<<-im}
getInverse<-function() {inversem}
list(set=set, get=get,
setInverse= setInverse,
getInverse= getInverse)
}
x-makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x<-makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x<-makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
cacheSolve <- function(x, ...) {
inverse<-x$getInverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data<-x$get()
inverse<- solve(data,...)
x$setInverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
cacheSolve(x)
